# =========================================================================== #
# --------------------------------------------------------------------------- #
   SPREADPG="\\"`echo pagespread | md5sum        | # 
                 base64 | tr [:upper:] [:lower:] | # 
                 sed 's/[^a-z]//g' | cut -c 1-8  | # 
                 tee``echo $RANDOM | md5sum      | # 
                 sed 's/[^a-f]//g' | cut -c 1-4`   #
# --------------------------------------------------------------------------- #  
  write2src "% -------------------------------------------------- %"
  write2src "   \newcommand${SPREADPG}[2]{%"
  write2src "   \includepdf[pagecommand={\thispagestyle{empty}},"
  write2src "               scale=1,pages=#2]{#1}"
  write2src "  }"
  write2src "% -------------------------------------------------- %"

# --------------------------------------------------------------------------- #
# =========================================================================== #

function SPREAD() {

   mkpages $* --keeptmp

   FIRSTPAGEIS="" # RESET
   NUMPAGES=`pdftk $PDFGET dump_data  | # GET INFO ($PDFGET SET BY mkpages)
             grep NumberOfPages       | # GET PAGE NUMBER INFO
             cut -d ":" -f 2          | # CUT FIELD
             sed 's/[^0-9]//g'`         # RM ALL BUT NUMBERS

 # EXTRACT PAGE FLAG VALUES
 # ------------------------------------------------------------------------ #
   PAGES=`echo $* | sed 's/ /\n/g'    | # SPACES TO NEWLINES
          sed "/[^0-9\\-]/d"          | # NO LINES WITH MORE THAN NUMS AND -
          egrep -v "^-|-$"            | # IGNORE ISOLATED - 
          grep -v "^[ ]*$" | tail -n 1` # 
   if   [ `echo $PAGES | wc -c` -le 1 ] # PAGES ARE NOT SET
   then  PAGES="-"
   elif [ `echo $PAGES | grep "^[0-9]" | # PAGES DO ACTUALLY ...
           wc -l` -ge 1 ]                # ... START WITH A NUMBER
   then  P1=`echo $PAGES | cut -d "-" -f 1` # SET P1 TO NUM BEFORE DASH
         P2=`echo $PAGES               | # DISPAY PAGE FLAG
             sed 's/^[0-9]*-/-/'       | # CONVERT LEADING NUMBERS TO DASH
             grep "-" | cut -d "-" -f 2` # SELECT AND CUT LEADING DASH
   else  PAGES="-" ; PAGECOMMAND=""; fi      # DEFINE FALLBACK

 # CONFORM PAGE VALUES
 # ------------------------------------------------------------------------ #
   if [ "$P1" != "" ] # IF P1 IS SET
   then if [ "$P1" -gt "$NUMPAGES" ];then P1="$NUMPAGES"; fi;fi

   if [ "$P2" != "" ]                 # IF P2 IS SET
    then if [ "$P2" -gt "$NUMPAGES" ] # IF P2 IS GREATER THAN MAX PAGE NUMBER ...
         then P2="$NUMPAGES"          # ... SET TO MAX PAGE NUMBER
         fi;  PAGESEQ=`seq $P1 $P2`   # SET PAGE SEQUENCE
         if [ "$P2" -lt "$P1" ]       # IF P2 IS BIGGER THAN P1
         then PAGESEQ=`seq $P2 $P1  | # START PAGE SEQUENCE FROM LOWER VALUE
                       tac`           # ... AND REVERT
         fi
   else PAGESEQ="$P1"                 # IF P2 IS NOT SET PAGE SEQUENCE = P1
   fi
   if [ "$PAGES" == "-" ];then        # IF PAGE FLAG REQUIRES ALL ...
         P1="1";P2="$NUMPAGES"        # ... SET PAGE SEQUENCE ...
         PAGESEQ=`seq $P2`            # ... TO MAX PAGE NUMBER
   fi

   if [ `python -c "print $P1 / 2.0" | # DIVIDE BY 2
         cut -d "." -f 2` -lt 1 ]      # CUT AND CHECK VALUE AFTER .
   then  FIRSTPAGEIS="even"            # IF = 0 -> PAGE IS EVEN
   else  FIRSTPAGEIS="odd"             # IF > 0 -> PAGE IS ODD
   fi    

   if   [ "$FIRSTPAGEIS" == "odd" ]; then
           PAGECOMMAND="\cleartoleft"
   elif [ "$FIRSTPAGEIS" == "even" ]; then
           PAGECOMMAND="\cleartoright"
   else  # ALL PAGES -> P1 = 1
           PAGECOMMAND="\cleartoleft"
   fi

 # ALLOW IRREGULAR PLACEMENT
 # ----
   if [ `echo $PAGES | grep -v "-" | # RM - AND 0-9 => 2 -gt 0
         wc -l` -gt 0 ]; then  PAGECOMMAND=""; fi

   if [ -f $PDFGET ]; then
        write2src "$PAGECOMMAND"
        for PAGENUM in $PAGESEQ
         do
            write2src "${SPREADPG}{$PDFGET}{$PAGENUM}"
        done
   fi

}

# --------------------------------------------------------------------------- #


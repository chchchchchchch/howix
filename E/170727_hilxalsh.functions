# --------------------------------------------------------------------------- # 
# MODIFY $TMPTEX BEFORE COMPILING PDF 
# --------------------------------------------------------------------------- # 
  function modTeX() { 
 
 # MOVE NEWLINE ON NEW LINE 
   sed -i 's/\\\\/\n\\\\/g'                                  $SRCDUMP 
 
 # CHANGE STANDARD ENVIRONMENT CREATED BY PANDOC  
   sed -i 's/\\begin{lstlisting}/\\begin{plain}{10}/'        $SRCDUMP 
   sed -i 's/{lstlisting}/{plain}/'                          $SRCDUMP

 # WRAP URLS IN COMMAND 
   sed -i '/^%/!s,\bhttp.\?://[^ }!]*,\\http{&},g'           $SRCDUMP 

 # ESCAPE \http MACRO INSIDE \lstinline
  #sed -i 's/\(lstinline!\)\(\\http{[^}]*}\)/\1째\2째/g'       $SRCDUMP
 # RM \http MACRO INSIDE \lstinline
   sed -i 's/\(lstinline!\)\(\\http{\)\([^}]*\)\(}\)/\1\3/g' $SRCDUMP

 # CUSTOM STYLE FOR \lstinline 
   sed -i 's,\\lstinline!,\\lstinline[style=inline]!,g'      $SRCDUMP 
 
 # INJECT NON-BREAKING SPACE HACK 
   sed -i 's,\([a-zA-Z]\)\(::\)\([a-zA-Z]\),\1~\3,g'         $SRCDUMP 
 
 # INJECT LINEBREAK HACK 
   sed -i 's,\([a-zA-Z]\)\(:;\)\([a-zA-Z]\),\1 \\\\ \3,g'    $SRCDUMP 

 # MAKE ARROWS
   sed -i "s/--\\\textgreater{}/\\\ding{222}/g"              $SRCDUMP
 
  } 
 
 # ------------------------------------------------------------------------- # 
 # DO IT AT THE END 
 # ------------------------------------------------------------------------- # 
   if [ "$OUTPUTFORMAT" == pdf ];then 
 
       # ADD ONLY ONCE 
         if [ `echo $preOutput | grep modTeX | wc -l ` -lt 1 ];then 
               preOutput="$preOutput modTeX" 
         fi 
 
   elif [ "$OUTPUTFORMAT" == html ];then 
 
         sleep 0 
 
   fi 
 # ------------------------------------------------------------------------- # 
# --------------------------------------------------------------------------- # 

# --------------------------------------------------------------------------- #
# OVERWRITE
# --------------------------------------------------------------------------- #

function INCLUDE() {

  # echo "INCLUDE STARTS ====================================================="

# SAVE FUNCTION ID (NOT AS VARIABLE, MAY BE OVERWRITTEN)
# ------------------------------------------------------ #
  FID=`date +%s%N`; echo $FID >> ${TMPID}.fid

# MAKE HREF
# --------------------------------------------------------
  WWWLINK=`shortref $*`
  REFCODE=`refsrc $WWWLINK       | #
           sed 's/\\\/\\\\\\\/g' | #
           sed 's/\//\\\\\//g'`    #
   IDINID=`echo $REFCODE | md5sum | cut -c 1-6`
  REFIDIN="$IDINID"
  if [ X"$HREFMODE" != "XOFF" ]; then
  write2src "HEREREF$REFIDIN"
  fi

  echo -e "\n% $FID\n" >> $SRCDUMP

# PROCESS INPUT !!!!!
# --------------------------------------------------------
  mdsh2src $*

# ADD REFERENCE IF NOT SKIPPED
# --------------------------------------------------------
  if [ X"$SKIP"     != "XYES" ] &&
     [ Y"$RUN"      == "YYES" ]; then
       sed -i "s,HEREREF$REFIDIN,$REFCODE," $SRCDUMP
  else
       sed -i "/^HEREREF${REFIDIN}$/d" $SRCDUMP
  fi
       sed -i "/^HEREREF.*$/d" $SRCDUMP # EMERGENCY REMOVE

# REMOVE ADDED FUNCTIONS
# --------------------------------------------------------
  if [ -f ${TMPID}.fid ]; then

# LOAD LATEST FUNCTION ID
  FID=`tail -n 1 ${TMPID}.fid`
# REMOVE FROM FUNCTIONS
  sed -i "/${FID} -- START$/,/${FID} -- END$/d" ${FUNCTIONS}
# REMOVE FROM SAVED FUNCTIONS
  sed -i "/$FID/d" ${TMPID}.fid
# RELOAD FUNCTIONS
  source $FUNCTIONS

  fi

  # echo "INCLUDE ENDS  ======================================================"
}

# --------------------------------------------------------------------------- #
# ../lib/mdsh/href.functions 
# --------------------------------------------------------------------------- #
  SHORTURLBASE="http://lfkn.de"
  QRDEKOSRC=$MAINPATH/151007_qrdeko-simple.svg
# --------------------------------------------------------------------------- #

function HREF() {

       O=`echo $* | cut -d " " -f 1`
       THISCMD="% HREF:"

   if [ "X$O" == "XON"  ] ||
      [ "X$O" == "XOFF" ]
    then
         HREFMODE="$O"
        #echo "HREFMODE: $HREFMODE"
    else
     if [ "X$HREFMODE" != "XOFF"  ]; then

         WWWLINK=`urlitzer "$*"`
         REFCODE=`refsrc $WWWLINK`
         write2src "$REFCODE"
     fi
   fi
}

# --------------------------------------------------------------------------- #

function FLUSHQRURLS(){

  write2src "\bigskip"
  write2src "URLS:"
  write2src ""

  for SHORTURL in `cat $QRURLLOG`
   do
     LONGURL=`curl -sIL $SHORTURL         | # CURL URL
              tr -d '\015'                | # CONFORM DOS END OF LINE
              grep ^Location              | # SELECT LOCATION
              cut -d ":" -f 2-            | # CUT SECOND FIELD
              tail -n 1                   | # SELECT LAST LINE
              sed 's,[ \t]*,,'            | # REMOVE ALL SPACES
              sed 's,/$,,'                | # REMOVE TRAILING SLASH
              sed "s,^${SHORTURLBASE}$,,"`  # DELETE SHORTURLBASE ONLY
     if [ `echo $LONGURL | wc -c` -ge 2 ]; then
           write2src "$SHORTURL -> $LONGURL"
      else
           write2src "$SHORTURL NOT SET!"
     fi
  done

}

# --------------------------------------------------------------------------- #
# OVERWRITE
# --------------------------------------------------------------------------- #
  function refsrc() {

    mkqr $* > /dev/null 2>&1
    REFCODE="\qrmargin{$QRPDF}{$QRTXT}"
    echo "$REFCODE"

  }
# --------------------------------------------------------------------------- #
# --------------------------------------------------------------------------- #

function SRCCODE() {

 # ------------------------------------------------------------------------ #
 # CHECK/SET LANGUAGE ARGUMENT
 # ------------------------------------------------------------------------ #
   ALL="$*";THISCMD="SRCCODE";
   ENVIRONMENT="" # RESET
   SRCLANG=`echo $1 | sed 's/ //g' | sed 's/[^a-z]//g'`

   if [ "$SRCLANG" != "" ];then
         ENVIRONMENT=`grep -ih "newenvironment{$SRCLANG" ${TMPID}*.sty | #
                      grep -v "^%" | head -n 1 | #
                      cut -d "{" -f 2 | cut -d "}" -f 1`
   fi
   if [ `echo $ALL | sed "s/^[ ]*$SRCLANG[ ]*//" | wc -c` -gt 1 ];then
      if [ "$ENVIRONMENT" != "" ];then
            echo $ALL | sed "s/^[ ]*$SRCLANG[ ]*//" > ${TMPID}.xtract
       else
            echo $ALL                               > ${TMPID}.xtract
      fi
         # GET NUMBER FOR CMD LINE IN (UNPROCESSED) MDSH SRC AND
         # DISABLE CMD LINE IN MDSH SRC (PREVENT DOUBLE MATCH)
         # ----
           LNCMD=`grep -n "^% $THISCMD:" $MDSH | # FIND CMD LINE
                  head -n 1 | cut -d ":" -f 1`   # SELECT LAST MATCH
           sed -i "${LNCMD}s/^% $THISCMD:/%X${THISCMD}:/" $MDSH
    else
         getVerbatim "$THISCMD" ${TMPID}.xtract
   fi
   if [ "$ENVIRONMENT" == "" ];then ENVIRONMENT="plain"; fi

 # ------------------------------------------------------------------------ #
 # LOOP THROUGH EXTRACT AND BRUTE FORCE getFile
 # ------------------------------------------------------------------------ #
 ( IFS=$'\n'
   for L in `grep -n "" ${TMPID}.xtract`
    do L=`echo $L | cut -d ":" -f 2-` # cat SKIPPED EMPTY LINES?
       if [ `echo $L | grep "^[ ]*%[ ]*F:" | wc -l` -gt 0 ];then

         TRY=`echo $L | cut -d ":" -f 2- | #
              sed 's/^[ ]*//' | cut -d " " -f 1`
         getFile $TRY tmp.tmp

         if [ "$SUCCESS" == "YES" ];then
               LINES=`echo $L | sed "s/ /\n/g" | # SPACES TO NEWLINES
                      sed "/[^0-9\\-]/d"       | # NUMBERS AND - ONLY
                      grep -v "^[ ]*$"         | # NO EMPTY LINES
                      egrep -v "^-|-$"         | # IGNORE ISOLATED -
                      tail -n 1`                 # LAST LINE ONLY
               if [ "$LINES" != "" ];then
                     LINES=`echo $LINES | sed 's/-/,/'`
                     SELECTLINES="sed -n \"${LINES}p\" "
                else
                     SELECTLINES="tee"
               fi
               cat   tmp.tmp       | # START WITH ALL
               eval "$SELECTLINES" | # DO SELECT LINE RANGE
               tee                 >> ${TMPID}SRCCODE.tmp
               rm tmp.tmp
         fi
       else
            echo "$L"               >> ${TMPID}SRCCODE.tmp
       fi
   done;)

   mv ${TMPID}SRCCODE.tmp ${TMPID}.xtract

 # ------------------------------------------------------------------------ #
 # FORMAT EXTRACT
 # ------------------------------------------------------------------------ #
   unIndent ${TMPID}.xtract
   sed -i 's/^[ \t]*$/째\\emptylinelst째/' ${TMPID}.xtract
   LN=`wc -l ${TMPID}.xtract | cut -d " " -f 1`
 # ------------------------------------------------------------------------ #
   VERBATIM=${TMPID}.`md5sum ${TMPID}.xtract | cut -c 1-8`.verbatim
   mv ${TMPID}.xtract $VERBATIM

   if [ "$OUTPUTFORMAT" == pdf ];then

     #write2src "\begin{$ENVIRONMENT}{$LN}"
     # cat ${TMPID}.xtract >> $SRCDUMP
     #write2src "\end{$ENVIRONMENT}"
      write2src "\lstinput${ENVIRONMENT}{$VERBATIM}"

   elif [ "$OUTPUTFORMAT" == html ];then

      write2src "<pre><code class=\"${ENVIRONMENT}\">"
       cat ${TMPID}.xtract >> $SRCDUMP
      write2src '</code></pre>'

   fi
 # ------------------------------------------------------------------------ #
 # rm ${TMPID}.xtract # CLEAN UP

}

# --------------------------------------------------------------------------- #
# SUPPORT OLD SYNTAX
# --------------------------------------------------------------------------- #

function SRCODE() {

   REFTMP="R${RANDOM}F";write2src "$REFTMP"

    SRCCODE srcode % F: $*

   if [ "X$HREFMODE" != "XOFF"  ]; then
         WWWLINK=`shortref $*`
         REFCODE=`refsrc $WWWLINK       | #
                  sed 's/\\\/\\\\\\\/g' | #
                  sed 's/\//\\\\\//g'`    #
         sed -i "s,$REFTMP,$REFCODE,g" $SRCDUMP
   fi;   sed -i "s,$REFTMP,,g" $SRCDUMP
}

function QUAVERBATIM() {

   REFTMP="R${RANDOM}F";write2src "$REFTMP"

    SRCCODE quaverbatim % F: $*

   if [ "X$HREFMODE" != "XOFF"  ]; then
         WWWLINK=`shortref $*`
         REFCODE=`refsrc $WWWLINK       | #
                  sed 's/\\\/\\\\\\\/g' | #
                  sed 's/\//\\\\\//g'`    #
         sed -i "s,$REFTMP,$REFCODE,g" $SRCDUMP
   fi;   sed -i "s,$REFTMP,,g" $SRCDUMP
}

# --------------------------------------------------------------------------- #

# --------------------------------------------------------------------------- #

function SOFTWAREUSED() {

    getFile $1 ${TMPID}softwareused.tmp
    write2src "\begin{quaverbatim}"

     cat ${TMPID}softwareused.tmp | # START ...
     tee >> $SRCDUMP                # WRITE TO FILE

    write2src "\end{quaverbatim}"
    rm ${TMPID}softwareused.tmp
}

# --------------------------------------------------------------------------- #

function PDF() {(

  THISCMD="PDF"
  if [ `echo $* | wc -c` -lt 2 ]; then # = NO PARAMETERS PROVIDED
        getVerbatim "$THISCMD" $SRCLIST
  else
        echo $* > $SRCLIST
  fi

 ( IFS=$'\n'
  for ITEM in `cat $SRCLIST`
   do
      PDFSRC=`echo $ITEM | sed 's/ /\n/g'  | # SPACES TO NEWLINES
              grep "\.pdf$" | head -n 1`     # SELECT FIRST ENDING WITH .pdf 
       PAGES=`echo $ITEM | sed "s/#/\n#/g" | # HASH TO NEWLINES
              grep -v "^#"                 | # IGNORE HASH LINES
              sed 's/ /\n/g'               | # SPACES TO NEWLINES
              sed "/[^0-9\\-]/d"           | # NO LINES WITH MORE THAN NUMS AND -
              egrep -v "^-|-$"             | # IGNORE ISOLATED - 
              grep -v "^[ ]*$" | tail -n 1`  # NO EMPTY / LAST LINE ONLY

      if [ `echo $PAGES | wc -c` -le 1 ]; then
            PAGES=-
      fi
      OPTIONS=`echo $ITEM | sed "s/#/\n#/g"       | #
               grep "^#" | tail -n 1              | #
               cut -d "#" -f 2 | sed 's/^[ \t]*//'` # 
      if [ `echo $OPTIONS | wc -c` -gt 1 ]; then
            OPTIONS=",$OPTIONS"
     # else echo "no options provided"
      fi

   PDFGET=${TMPID}`echo $PDFSRC | md5sum | cut -c 1-4`.pdf
   if [ ! -f $PDFGET ]; then
         getFile $PDFSRC $PDFGET
  # else echo "no need to download"
   fi

   if [ -f $PDFGET ]; then

      conformColor $PDFGET

     if [ "X$HREFMODE" != "XOFF"  ]; then
           WWWLINK=`shortref $*`
           REFCODE=`refsrc $WWWLINK | sed 's/qrmargin/qroverlay/'`
           write2src "\newpage"
           write2src "$REFCODE"
     fi
           write2src "\pdfpage{$PDFGET}{$PAGES}{$OPTIONS}"
   fi

  done )

  if [ -f $SRCLIST ]; then rm $SRCLIST ;fi

)}

# --------------------------------------------------------------------------- #

function SPREAD() {

   mkpages $*
   MACRO="% something went wrong with $SVGSRC"
   if   [ "P$FIRSTPAGEIS" == "Podd" ]; then
           PAGECOMMAND="\cleartoleft"
   elif [ "P$FIRSTPAGEIS" == "Peven" ]; then
           PAGECOMMAND="\cleartoright"
   else  # ALL PAGES
         # PAGECOMMAND=""
           PAGECOMMAND="\cleartoleft" # P1 = 1
   fi
   if [ `echo $PAGES | grep -v "-" | # RM - AND 0-9 => 2 -gt 0
         wc -l` -gt 0 ]; then  PAGECOMMAND=""; fi

   if [ -f $PDFGET ]; then
   MACRO="\spread{$PDFGET}{$PAGES}{$PAGECOMMAND}"
   fi

   write2src "$MACRO"

}

# --------------------------------------------------------------------------- #

function SHOWASAP() {

   mkpages $*
   REF=`echo $RANDOM | md5sum | cut -c 1-9`

   MACRO="% something went wrong with $SVGSRC"

   if [ `echo $PAGES | sed '/^[0-9]/!d' | wc -l` -gt 0 ]; then
         P=`echo $PAGES | cut -d "-" -f 1`
   else
         P=1
   fi

   if [ -f $PDFGET ]; then
      MACRO="\fullpagefloat{$PDFGET}{$P}{$REF}"
   fi

   write2src "$MACRO"
}

# --------------------------------------------------------------------------- #

function SUPERIMPOSE() {

  SVGSRC=`echo $* | sed 's/ /\n/g'    | # SPACES TO NEWLINES
          grep "\.svg$" | head -n 1`    # SELECT FIRST ENDING WITH .pdf 
   PAGES=`echo $* | sed "s/#/\n#/g"   | # HASH TO NEWLINES
          grep -v "^#"                | # IGNORE LINES STARTING WITH HASH
          sed 's/ /\n/g'              | # SPACES TO NEWLINES
          sed "/[^0-9\\-]/d"          | # NO LINES WITH MORE THAN NUMS AND -
          grep -v "^[ ]*$" | tail -n 1` # IGNORE EMPTY LINES, TAKE LAST MATCH
  if [ `echo $PAGES | wc -c` -le 1 ]; then
        PAGES=1
  fi

  P1=`echo $PAGES | cut -d "-" -f 1`
  P2=`echo $PAGES | cut -d "-" -f 2`

     PDF=${TMPID}`echo $SVGSRC | md5sum | cut -c 1-4`.pdf
  SVGTMP=${TMPID}`echo $SVGSRC | md5sum | cut -c 1-4`.svg
   MACRO="% something went wrong with $SVGSRC"

    if [ -f $PDF ]; then
      #echo "$PDF exists"
       MACRO="\superimpose{$PDF}{$P1}{$P2}"
  else

  ISSVG=`echo $SVGSRC | grep "\.svg$" | wc -l`
  if [ $ISSVG -gt 0 ]; then

    getFile $SVGSRC $SVGTMP
    echo $PDF

    if [ "X$SUCCESS" == "XYES" ]; then

    svglayers2pdfpages $SVGTMP $PDF

  # ----------------------------------------------------------------------- #
  # INCLUDE IN DOCUMENT
  # ----------------------------------------------------------------------- #
    MACRO="\superimpose{$PDF}{$P1}{$P2}"

   fi
  fi
 fi

 write2src "$MACRO"

}

# --------------------------------------------------------------------------- #

function PP(){(

   PPCOLLECT="" # RESET
     PPPAGES="" # RESET
     REFCODE="" # RESET
       PPSEP="% -----------------"
    PPSEPNUM=`grep -n "" $SRCDUMP               | # NUMBER LINES
              egrep "$PPSEP|^[0-9]*:$EMPTYLINE" | # LOCATE SEPARATOR OR EMPTY LINE
              tail -n 1                         | # SELECT LAST 
              cut -d ":" -f 1`                    # SELECT FIRST FIELD

    MOREOPTIONS=`echo $*               | # START PIPE
                 sed 's/OPTIONS:/\n&/' | #
                 grep "^OPTIONS:"      | #
                 head -n 1             | #
                 cut -d ":" -f 2`
    PPPDFS=`sed "1,${PPSEPNUM}d" $SRCDUMP  | # PRINT FROM LINENUM TO END
            grep -v "^% PP"                | # IGNORE COMMAND ITSELF
            sed "s/[ ]*${COMSTART}[ ]*//g" | #
            sed "s/[ ]*$COMCLOSE[ ]*//g"   | #
            sed "s/^[%]*[ ]*$/X.pdf/"      | # ALLOW EMPTY (=TO SHIFT)
            grep "\.pdf$"                  | # SELECT LINES WITH .pdf EXTENSION
            sed "s/^%//"                   | # REMOVE LEADING %
            sed "s/^[ ]*//"`                 # REMOVE ALL LEADING BLANKS
    PPNUM=`echo $PPPDFS |  sed 's/ /\n/g' | wc -l` # COUNT

     if [ "X$HREFMODE" != "XOFF"  ]; then
           PPLINK=`shortref $PPPDFS`
           echo $PPLINK
           REFCODE=`refsrc $PPLINK | sed 's/qrmargin/qroverlay/'`
       if [ "A$PPLINK" == "A$PPLBEFORE" ];then
           REFCODE=""
           echo "REF is the same"
       fi
           PPLBEFORE="$PPLINK"
     fi

   for PDFSRC in $PPPDFS
    do
       if [ "X$PDFSRC" == "XX.pdf" ]; then
             echo "do empty!"
             PPPAGES=$PPPAGES,
       else
        PDFGET=${TMPID}`echo $PDFSRC | md5sum | cut -c 1-8`.pdf

        if [ ! -f $PDFGET ]; then
              getFile $PDFSRC $PDFGET
            if [ -f $PDFGET ]; then
              conformColor $PDFGET
              PPPAGES="$PPPAGES,${PDFGET},-"
            fi
        else
            #echo "no need to download"
             PPPAGES="$PPPAGES,$PDFGET,-"
        fi
       fi
   done
          MKPN="pagecommand={\thispagestyle{fancy}\label{$REFID}$REFCODE},"
          OPTIONFILTER=`echo XX,$MOREOPTIONS | sed 's/,/\n/g' | #
                        cut -d "=" -f 1 | sed ':a;N;$!ba;s/\n/|/g' |#
                        sed 's/|$//' | sed 's/ //g'`
          PPPAGES=`echo $PPPAGES | sed 's/^,//'`

    if   [ $PPNUM -eq 1 ]; then

           PPPAGES=`echo $PPPAGES | sed "s/,-//g"`
          OPTIONS="nup=1x1,scale=.625,frame=true,
                   offset=28.5 27,$MKPN"
           PMACRO="\includepdf[$OPTIONS]{$PPPAGES}"

    elif [ $PPNUM -eq 2 ]; then

           OPTIONS="nup=1x2,frame=true,angle=\rotif,offset=28.5 27,
                    delta=10 10,scale=.637,$MKPN"
            PMACRO="\includepdfmerge[$OPTIONS]{$PPPAGES}"

    elif [ $PPNUM -eq 3 ]; then

           OPTIONS="nup=2x2,frame=true,offset=5 0,
                    delta=20 25,scale=.85,$MKPN"
            PMACRO="\includepdfmerge[$OPTIONS]{$PPPAGES}"

    elif [ $PPNUM -eq 4 ]; then

           OPTIONS="nup=2x2,frame=true,offset=28.5 30,
                    delta=10 10,scale=.61,$MKPN"
            PMACRO="\includepdfmerge[$OPTIONS]{$PPPAGES}"

    elif [ $PPNUM -eq 9 ]; then
 
           OPTIONS="nup=3x3,scale=1.97,frame=true,offset=29 27.5,
                    delta=10 10,$MKPN"
            PMACRO="\includepdfmerge[$OPTIONS]{$PPPAGES}"
    else
           OPTIONS=`echo "nup=4x4,frame=true,offset=28.5 30,
                    delta=10 10,scale=1.29,$MKPN" | #
                    sed 's/,/,\n/g' | #
                    egrep -v "$OPTIONFILTER"`",$MOREOPTIONS"
            PMACRO="\includepdfmerge[$OPTIONS]{$PPPAGES}"
    fi

       echo $PMACRO >> $SRCDUMP
)}

# --------------------------------------------------------------------------- #

function TEXIN() {
                          write2src "$*"
}
# KEEP FOR BACKWARDS COMPATIBILITY
function TEXINJECT() {
                          write2src "$*"
}

# --------------------------------------------------------------------------- #

function RESETALL() {
                          write2src "\resetall"
}

# --------------------------------------------------------------------------- #

function SCALEFONT() {
                          write2src "\relscale{$1}"
}

# --------------------------------------------------------------------------- #

function RESETFONT() {
                          write2src "\resetfont"
}

# --------------------------------------------------------------------------- #

function NEWPAGE(){
                          write2src "\newpage"
}

# --------------------------------------------------------------------------- #

function VFILL(){
                          write2src "\vfill"
}

# --------------------------------------------------------------------------- #

function BIGSKIP(){
                          write2src "\bigskip"
}

# --------------------------------------------------------------------------- #

function MEDSKIP(){
                          write2src "\medskip"
}

# --------------------------------------------------------------------------- #

function SMALLSKIP(){
                          write2src "\smallskip"
}

# --------------------------------------------------------------------------- #

function EMPTYPAGE(){
                          write2src "\emptypage"
}

# --------------------------------------------------------------------------- #

function CLEARTORIGHT(){
                          write2src "\cleartoright"
}

# --------------------------------------------------------------------------- #

function CLEARTOLEFT(){
                          write2src "\cleartoleft"
}

# --------------------------------------------------------------------------- #

function TITLE() {

  NBSPACE="N${RANDOM}B"

  echo -e "\n\n\n\n" >> $SRCDUMP
  echo "$*" | # KEEP (MULTIPLE) SPACES
  sed -e "s/\([a-zA-Z_*]\)\( \)\([a-zA-Z_*]\)/\1 $NBSPACE \3/g" | #
  pandoc -r markdown -w latex | #
  sed ':a;N;$!ba;s/\n/ /g'      | #      
  sed "s/[ ]*${NBSPACE}[ ]*/~/g"  | #
  sed 's/^/\\chapter{/' | sed 's/$/}/' >> $SRCDUMP
  write2src ""

}

# --------------------------------------------------------------------------- #

function FLUSHLOG(){

  WGETLOGID=`md5sum $WGETLOG | cut -c 1-4`

  cat $WGETLOG               | # USELESS USE OF CAT
  tr -d '\015'               | # CONVERT DOS END OF LINE (IN WGET -d MODE)
  tr -s ' '                  | # SQUEEZE CONSECUTIVE SPACES
  grep -v '\.\.\.\.\.\..*s$' | # IGNORE PROCESS LINES
  grep -v "^Saving"          | #
  grep -v " saved "          | #
  grep -v "^$"               | #
  sed ":a;N;\$!ba;s/\n/ /g"  | # RM NEWLINES
  fold -w 140                | #
  tee                       >> ${TMPID}.${WGETLOGID}.wgetlog

  write2src "\wgetlog{${TMPID}.${WGETLOGID}.wgetlog}"

  rm $WGETLOG

}

# --------------------------------------------------------------------------- #

function INFO(){

  INFOID=`echo $1 | sed 's/ //g' | sed "s,$SHORTURLBASE/,,g"`

  IFHTTP=`echo $INFOID | grep "http.\?://" | wc -l`
  if [ $IFHTTP -ge 1 ]; then

       INFOSRC="$INFOID"
       INFOGET=${TMPID}`echo $INFOID | md5sum | cut -c 1-4`.info
       echo "NOT SHORTURLED: $INFOSRC"
  else
       SHORTURL="${SHORTURLBASE}/${INFOID}"
        LONGURL=`curl -sIL $SHORTURL         | # CURL URL
                 tr -d '\015'                | # CONFORM DOS END OF LINE
                 grep ^Location              | # SELECT LOCATION
                 cut -d ":" -f 2-            | # CUT SECOND FIELD
                 tail -n 1                   | # SELECT LAST LINE
                 sed 's,[ \t]*,,'            | # REMOVE ALL SPACES
                 sed 's,/$,,'                | # REMOVE TRAILING SLASH
                 sed "s,^${SHORTURLBASE}$,X,"` # DELETE SHORTURLBASE ONLY (-> PRODUCE 404)
       INFOSRC="${LONGURL}/info.txt"
       INFOGET=${TMPID}`echo $LONGURL | md5sum | cut -c 1-4`.info
  fi

  LHERE=L`echo $RANDOM | cut -c 1-3`N ; BHERE=B`echo $RANDOM | cut -c 1-3`R

  if [ ! -f $INFOGET ]; then
      getFile "$INFOSRC" "$INFOGET"
  else
     echo "No need to download!"
  fi

  if [ X$SUCCESS == XYES ]; then

     write2src "\marginpar{\begin{margininfo}"

     for SECTION in SHORT_INFO
    #for SECTION in SHORT_INFO LICENSE COPYRIGHT_HOLDER
      do
       SECTION=`echo $SECTION | sed 's/_/ /g'`
       cat $INFOGET                | # USELESS USE OF CAT
       sed "s/^%.*$//"             | # REPLACE COMMENTS WITH EMPTY LINE
       sed -e :a \
           -e '$!N;s/\n[ \t]*=/ /;ta' \
           -e 'P;D'                | # APPEND UNDERLINE TO PREVIOUS LINE
       sed -n "/${SECTION}[ \t]*=*$/,\$p" | # PRINT FROM REGEX TO END OF FILE
       sed "s/^[ \t]*$/$LHERE/g"   | # REMOVE EMPTY LINES
       sed "/=\?=$/s/^/\n/"        | # ADD NEWLINE AT START IF ENDS WITH ==
       sed  '1,/^$/!d'             | # FIRST PARAGRAPH ONLY
       grep -v "^[ \t]*$SECTION[ \t]*=*$" | # IGNORE SECTION LINES
       sed ':a;N;$!ba;s/\n/ /g'    | # REMOVE LINEBREAKS
       sed "s/$/$BHERE/"           | # PROTECT LINEBREAKS HERE
       pandoc -r markdown -w latex | # FROM MARKDOWN TO LATEX
       sed ':a;N;$!ba;s/\n/ /g'    | # REMOVE LINEBREAKS
       sed "s/$BHERE/\n/g"         | # RESTORE LINEBREAKS
       sed "s/$LHERE/ /g"          | # RESTORE EMPTY LINES
       sed 's/ /\n/g'              | #
      #sed -e '/^http.\{20\}/s/^/\\urlsplit{/' \
      #    -e '/^\\urlsplit/s/$/}/'| #
      #sed -e '/^http:\/\//s/^/\\urlf{/' \
      #    -e '/^\\urlf/s/$/}/'| #
       tee  >> $SRCDUMP              # WRITE TO FILE
       write2src ""                  # EMPTY LINE

     done
       write2src "\end{margininfo}\vspace{1cm}}"
  else
       echo "file does not exist"
  fi

}

# --------------------------------------------------------------------------- #

function TABLEOFCONTENTS(){

  write2src "\cleardoublepage"
  write2src "\setcounter{tocdepth}{0}"
  write2src "\tableofcontents"
  write2src "\newpage"
}

# --------------------------------------------------------------------------- #

function TOCITEM(){

  TOCTITLE=`echo $* | pandoc -r markdown -w latex`

  if [ `echo $TOCTITLE | grep ":" | wc -l` -gt 0 ]; then
  F1=`echo $TOCTITLE | cut -d ":" -f 1`
  F2=`echo $TOCTITLE | cut -d ":" -f 2-`
  TOCTITLE="\underline{\textsc{$F1}}: $F2"
  fi

  write2src "\addcontentsline{toc}{chapter}{$TOCTITLE}"

}

# --------------------------------------------------------------------------- #

function REF() {

  REFID=`echo $*             | # WHAT? 
         sed 's/^[ \t]*//'   | # REMOVE LEADING WHITESPACE
         sed 's/[ \t]*$//'   | # REMOVE TRAILING WHITESPACE
         md5sum | cut -c 1-10` # CREATE UNIQUE ID
          
  write2src "\label{$REFID}"

}

# --------------------------------------------------------------------------- #

function REFREF() {

  REFID=`echo $*             | # WHAT? 
         sed 's/^[ \t]*//'   | # REMOVE LEADING WHITESPACE
         sed 's/[ \t]*$//'   | # REMOVE TRAILING WHITESPACE
         md5sum | cut -c 1-10` # CREATE UNIQUE ID
          
  write2src "(\ding{222} p. \pageref{$REFID})"
}

# --------------------------------------------------------------------------- #

function BY(){

  write2src "{\by{$*}}"

}

# --------------------------------------------------------------------------- #

function LICENSE(){

  LICENSE=`echo $* | cut -d " " -f 1`
  VERSION=`echo $* | cut -d " " -f 2 | cut -d "(" -f 2 | cut -d ")" -f 1`

  LNAME=`echo $*           | #
         sed 's/[ ]*(/_/g' | #
         sed 's/)//g'      | #
         sed 's,[ ]*/[ ]*,_,g'`
  LID=`echo $LNAME | md5sum | cut -c 1-6`

  BADGESRC="$MAINPATH/151025_licenses.svg"
  BADGEPDF=${TMPID}${LID}`echo $RANDOM | cut -c 1-2`.pdf

# SELECT LAYERS: ONE FOR EACH UNIQUE NAME
# ---------------------------------------------------------------------------- #
  sed ":a;N;\$!ba;s/\n/ /g" $BADGESRC   | # REMOVE ALL LINEBREAKS
  sed 's/<g/\n<g/g'                     | # RESTORE GROUP OPEN + NEWLINE
  sed '/groupmode="layer"/s/<g/4Fgt7R/g'| # PLACEHOLDER FOR LAYERGROUP OPEN
  sed ':a;N;$!ba;s/\n/ /g'              | # REMOVE ALL LINEBREAKS
  sed 's/4Fgt7R/\n<g/g'                 | # RESTORE LAYERGROUP OPEN + NEWLINE
  sed 's/display:none/display:inline/g' | # MAKE VISIBLE EVEN WHEN HIDDEN
  tee head.tmp                          | # DUMP NOW TO EXTRACT HEAD LATER
  tail -n +2                            | # REMOVE HEAD (=FIRST LINE)
  sed 's/<\/svg>//g'                    | # REMOVE CLOSING TAG
  grep -n ""                            | # NUMBER LINES
  sed "s/^.*$/&|&/g"                    | # DOUBLE CONTENT FOR ANALYSIS
  sed "s/:label/\nX1X/"                 | # MARK LABEL (=NAME)
  grep -v ":label=\"XX_"                | # IGNORE XX LAYERS
  grep  "^X1X"                          | # SELECT MARKED
  egrep ":label=\"$LNAME|:label=\"DEKO" | #
  shuf                                  | # SHUFFLE
  sort -u -t\" -k1,2                    | # SELECT ONE FOR EACH LABEL
  cut -d "|" -f 2-                      | # SELECT SECOND/UNTOUCHED CONTEN
  sort -n -u -t: -k1,1                  | # SORT ACCORDING TO LINE NUMBER
  cut -d ":" -f 2-                      | # REMOVE LINENUMBER
  tee  > layers.tmp                       # WRITE TO FILE
# ---------------------------------------------------------------------------- #

  head -n 1 head.tmp  >  ${TMPID}ll.svg
  cat layers.tmp      >> ${TMPID}ll.svg
  echo '</svg>'       >> ${TMPID}ll.svg
  inkscape --export-pdf=$BADGEPDF \
           ${TMPID}ll.svg
  rm ${TMPID}ll.svg head.tmp layers.tmp

  LREF=""
  for L in `echo $* | #
            sed 's/[ ]*(/_/g' | #
            sed 's/)//g' | #
            sed 's,[ ]*/[ ]*,\n,g' | #
            sort -u`
   do
      LID=`echo $L | md5sum | cut -c 1-6`
      LREF="${LREF},\pageref{$LID}"
  done

  LREF=`echo $LREF | sed 's/^,//'`

  write2src "\qrmargin{$BADGEPDF}{0000}"
  write2src "\marginpar{\begin{marginlicenseblock}"
  write2src "{\relscale{.7}\ding{222}\relscale{1.2} p.${LREF}~}"
  write2src "\end{marginlicenseblock}\vspace{.8cm}}"

  echo $* | #
  sed 's/[ ]*(/_/g' | #
  sed 's/)//g' | #
  sed 's,[ ]*/[ ]*,\n,g' >> $TMPID.licenses

}

# --------------------------------------------------------------------------- #

function FLUSHLICENSES(){

   GITBASEURL="https://github.com/christop/licenses/raw"

 #      FAL_1.3:d31e37d/pdf/FAL_1.3.pdf
 #      GPL_2.0:07f63bc/pdf/GPL_2.0.pdf
 #      GPL_3.0:407d3a2/pdf/GPL_3.0.pdf
 #     GFDL_1.2:2f159f8/pdf/GFDL_1.2.pdf
 #     GFDL_1.3:8c8aeae/pdf/GFDL_1.3.pdf
 # CC-BY-SA_2.5:3cea07b/pdf/CC-BY-SA_2.5.pdf
 # CC-BY-SA_3.0:362006e/pdf/CC-BY-SA_3.0.pdf

    write2src "\emptypage"
    write2src "\cleartoright"

    for LNAME in `cat $TMPID.licenses | sort -u`
     do
        LPDFURL=$GITBASEURL/`grep $LNAME $FUNCTIONS | #
                             tail -n 1 | cut -d ":" -f 2-`
        LID=`echo $LNAME | md5sum | cut -c 1-6`
        OPTIONS=",scale=.9,offset=15 5"
        getFile $LPDFURL ${TMPID}${LID}.pdf
     if [ -f ${TMPID}${LID}.pdf ]; then
        write2src "\cleartoright"
        write2src "\pdfpageplus{${TMPID}${LID}.pdf}{1}{$OPTIONS}{\label{$LID}}"
     fi
   done
}

# --------------------------------------------------------------------------- #

function SWAP(){ 
 
  FROM=`echo $* | cut -d " " -f 1   | # 
        sed 's/ //g' | sed 's/"//g' | sed 's/\\\/\\\\\\\/g'` 
    TO=`echo $* | cut -d " " -f 2   | # 
        sed 's/ //g' | sed 's/"//g' | sed 's/\\\/\\\\\\\/g'` 
   
   sed -i "s/\b$FROM\b/$TO/g" ${SRCDUMP}
}

# --------------------------------------------------------------------------- #

function HYPHENATE() {

  N=`echo $* | sed 's/ /\n/g' | #
     sed '/^[^0-9]\+$/d' | tail -n 1`
  if [ "$N" == "" ];then N=1; fi

  UNHYPHENATED=`echo $* | sed 's/ /\n/g' | #
                sed '/^[0-9]\+$/d' | head -n 1 | #
                sed 's/-//g'`
  HYPHENATIZED=`echo $* |  sed 's/ /\n/g' | #
                sed '/^[0-9]\+$/d' | head -n 1 | #
                sed 's,-,\\\\\\\-,g'`

  for N in `seq $N`
   do
      LNHYPH=`grep -n "$UNHYPHENATED" $SRCDUMP | #
              tail -n 1 | cut -d ":" -f 1 `
      if [ "$LNHYPH" != "" ];then
    
         if [ "$OUTPUTFORMAT" == pdf ];then
              sed -i "${LNHYPH}s/$UNHYPHENATED/$HYPHENATIZED/" $SRCDUMP
         fi
      fi
  done

}

# --------------------------------------------------------------------------- #

# function SLOPPY?
# https://tex.stackexchange.com/questions/298331/
# -> disable-microtype-for-a-single-paragraph



# =========================================================================== #
# MEMO CUSTOM FUNCTIONS
# =========================================================================== #

# --------------------------------------------------------------------------- #
# D O  ( N O T )  R E P E A T   Y O U R S E L F
# --------------------------------------------------------------------------- #

function DRYCUSTOMTEX() {

  echo "\newcommand\drycc[1]{\mbox{\texttt{\upshape#1}}}" >> $SRCDUMP

  write2src "\newenvironment{quotewwwsite}{%
        \medskip%
        \relscale{.8}%
        \tt%
   }{
        \bigskip
        \vfill
   }"

  write2src "\makeatletter
             \renewenvironment{quote}
                   {\it
                    \list{}{\listparindent=0pt
                            \itemindent\listparindent
                            \leftmargin=6pt
                            \rightmargin=12pt
                            \topsep=10pt
                           }%
                    \item\relax}
                   {\endlist}
             \makeatother"
}

# --------------------------------------------------------------------------- #

function SWAPTHISHERE(){

  FROM=`echo $* | cut -d " " -f 1 | sed 's/ //g' | #
        sed 's/"//g' | sed 's/\\\/\\\\\\\/g'`
    TO=`echo $* | cut -d " " -f 2 | sed 's/ //g' | #
        sed 's/"//g' | sed 's/\\\/\\\\\\\/g'`

   INCLUDEID="$FID"

   echo "$FROM -> $TO"

   tac $SRCDUMP              | #
   sed -n "/$INCLUDEID/,\$p" | #
   tac  > ${SRCDUMP}.tmp
 
   cat $SRCDUMP | #
   sed -n "/$INCLUDEID/,\$p" | #
   sed '1d' | #
   sed "s/$FROM/$TO/g" >> ${SRCDUMP}.tmp
 
   mv ${SRCDUMP}.tmp $SRCDUMP

}

# --------------------------------------------------------------------------- #

function TREATCAMELCASE(){

   C1="\\\drycc{"
   C2="}"

   INCLUDEID="$FID"

   tac $SRCDUMP              | #
   sed -n "/$INCLUDEID/,\$p" | #
   tac  > ${SRCDUMP}.tmp
 
   cat $SRCDUMP | sed -n "/$INCLUDEID/,\$p" | sed '1d' | # SELECT INCLUDE
   sed "s/^/ /" | sed "s/[ \t]*$/ /" | # MAKE SURE THERE ARE SPACES
   sed -re "s/([ ]+)([[:punct:]]*)(([A-Z]+[a-z]+){2,})([[:punct:]]*)\b/\1\2$C1\3$C2\5/g" >> ${SRCDUMP}.tmp 

   mv ${SRCDUMP}.tmp $SRCDUMP

}


# --------------------------------------------------------------------------- #
# H A C K E R S   A N D   T H E    F E A R    O F    W Y S I W Y G
# --------------------------------------------------------------------------- #
# DO ONLY WRITE ONCE !!!
# --------------------------------------------------------------------------- #

function HCATOFWYSIWYGCUSTOMTEX() {

  write2src "% INCLUDED HCATFOWYSIWYG FUNCTIONS"
  write2src "\renewcommand*{\rmdefault}{pju}\normalfont"
  write2src "\renewcommand*{\embody}{\fontfamily{grm}\selectfont\relscale{.8}}"
  write2src "\renewcommand{\texttt}[1]{%
             {\relscale{.8}\fontfamily{\ttstandard}\selectfont%
              \seqsplit{#1}}}"
  write2src "\lstdefinestyle{inline}{basicstyle=\ttfamily\relscale{.85}}"
  write2src "\fontsize{11pt}{11pt}\selectfont"
  write2src "\chapterfont{\fontfamily{pgd}\selectfont}"
  QSEP=`echo $RANDOM | md5sum | base64 | # CREATE RANDOM STRING
        sed 's/[^a-z]//g' | cut -c 1-8`  # NO DIGITS/ 8 ONLY
  write2src "\newcommand\\$QSEP{\vspace{0pt plus 5pt minus 5pt}}"
  write2src "\setlength{\parskip}{2pt plus 4pt minus 0pt}"

  write2src "\makeatletter
             \renewenvironment{quote}
                   {\list{}{\listparindent=2pt
                            \itemindent\listparindent
                            \leftmargin=5pt
                            \rightmargin=10pt
                            \topsep=10pt
                    \renewcommand{\embody}{} % MAYBE SOLVE BY IF
                           }%
                    \item\relax}
                   {\endlist}
             \makeatother"

   write2src "\renewcommand{\AtBeginQuote}{
               \\$QSEP\fontfamily{grm}\selectfont\relscale{.8}}"
   write2src "\renewcommand{\AtEndQuote}{\\$QSEP}"

   write2src "\newenvironment{figlettext}
             {\addtolength{\baselineskip}{\fill}%
              \addtolength{\parskip}{\fill}%
              \VerbatimEnvironment%
              \vfill
              \begin{Verbatim}[fontsize=\relsize{-3},fontseries=b]}%
             {\end{Verbatim}\medskip\vfill}"

   write2src "\addtolength{\skip\footins}{\fill}"
   write2src "\raggedbottom"

}

# --------------------------------------------------------------------------- #

function FIGLETHEADINGS() {

   TMPNOW=super.tmp

   FLF="$MAINPATH/../lib/fonts/figlet/cybermedium.flf"

   INCLUDEID="$FID"

 # SEPARATE PREVIOUS
 # ----------------------------
   tac $SRCDUMP                | #
   sed -n "/$INCLUDEID/,\$p"   | #
   tac             > ${SRCDUMP}.tmp
   echo -e "\n\n" >> ${SRCDUMP}.tmp
 
   cat $SRCDUMP                | #
   sed -n "/$INCLUDEID/,\$p"   | #
   sed '1d'       >  $TMPNOW
   echo -e "\n\n" >> $TMPNOW

   HNUMPREV=1
   S=XX ;COUNT=1
   HGREP="^\\\\chapter{|^\\\\section{|^\\\\subsection{"

   for H in `cat $TMPNOW       | #
             egrep -n "$HGREP" | #
             sed "s/ /$S/g"`
    do
      #FLF=`ls ../lib/fonts/figlet/*.* | shuf -n 1`
       HTYP=`echo $H           | #
             cut -d "\\\" -f 2 | #
             cut -d "{" -f 1`  
       HTXT=`echo "$H" | sed "s/$S/ /g" | #
             sed "s/~/ /g" | #
             cut -d "{" -f 2 | cut -d "}" -f 1`
       HNUM=`echo $H | cut -d ":" -f 1`
      #if [ $COUNT -gt 1 ]; then
           sed "$HNUMPREV,$HNUM!d" $TMPNOW | #
           egrep -v "$HGREP" >> ${SRCDUMP}.tmp
      #fi

       echo "\begin{samepage}"   >> ${SRCDUMP}.tmp 
       echo "  \\$HTYP{}"        >> ${SRCDUMP}.tmp
       echo "\begin{figlettext}" >> ${SRCDUMP}.tmp 
       echo $HTXT             | #
       fmt -s -w 12           | # 20
       figlet -w 200 -f $FLF     >> ${SRCDUMP}.tmp
       echo "\end{figlettext}"   >> ${SRCDUMP}.tmp 
       echo "\end{samepage}"     >> ${SRCDUMP}.tmp 

       HNUMPREV=$HNUM
       COUNT=`expr $COUNT + 1`
   done
  
   sed -n "$HNUM,\$p" $TMPNOW | #
   egrep -v "$HGREP"          >> ${SRCDUMP}.tmp

   mv ${SRCDUMP}.tmp $SRCDUMP
   rm $TMPNOW
}

# --------------------------------------------------------------------------- #

function RESETFONT() {

  write2src "\fontsize{11pt}{11pt}\selectfont"

}

# --------------------------------------------------------------------------- #
#  A P P R O P R I A T I O N   A N D   T Y P E
# --------------------------------------------------------------------------- #

function AATBATCUSTOMTEX() {

  write2src "\newcommand{\metafont}{\MF\xspace}"
  write2src "\newcommand{\tex}{{\fontfamily{lmr}\selectfont\TeX}\xspace}"

}

# --------------------------------------------------------------------------- #

function SWAPHERE(){

  FROM=`echo $* | cut -d " " -f 1   | #
        sed 's/ //g' | sed 's/"//g' | sed 's/\\\/\\\\\\\/g'`
    TO=`echo $* | cut -d " " -f 2   | #
        sed 's/ //g' | sed 's/"//g' | sed 's/\\\/\\\\\\\/g'`

   INCLUDEID="$FID"

   tac $SRCDUMP              | #
   sed -n "/$INCLUDEID/,\$p" | #
   tac  > ${SRCDUMP}.tmp

   cat $SRCDUMP | #
   sed -n "/$INCLUDEID/,\$p" | #
   sed '1d' | #
   sed "s/$FROM/$TO/g" >> ${SRCDUMP}.tmp

   mv ${SRCDUMP}.tmp $SRCDUMP

}

# --------------------------------------------------------------------------- #


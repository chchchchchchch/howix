# --------------------------------------------------------------------------- #

function CLEARTOLEFT() {

    if [ "$OUTPUTFORMAT" == pdf ];then

         write2src "\cleartoleft"
    fi
}

# --------------------------------------------------------------------------- #

function CLEARTORIGHT() {

    if [ "$OUTPUTFORMAT" == pdf ];then

         write2src "\cleartoright"
    fi
}

# --------------------------------------------------------------------------- #

function EMPTYPAGE() {

    if [ "$OUTPUTFORMAT" == pdf ];then

         write2src "\emptypage"
    fi
}
# --------------------------------------------------------------------------- #

function NEWPAGE() {

    if [ "$OUTPUTFORMAT" == pdf ];then

         write2src "\newpage"
    fi
}

# --------------------------------------------------------------------------- #

# CREATE UNIQUE NAME FOR MACROS USED HERE
# ---------------------------------------
  OFFPAGETEXTMACRO="\\"`echo offpagetext$RANDOM   | md5sum | base64    | #
                        tr [:upper:] [:lower:]    | sed 's/[^a-z]//g'  | #
                        cut -c 1-6``echo $RANDOM  | md5sum             | #
                        sed 's/[^a-f]//g' | cut -c 1-6`                  #
  SPREADWITHTEXTMACRO="\\"`echo offpagetext$RANDOM | md5sum | base64   | #
                           tr [:upper:] [:lower:]  | sed 's/[^a-z]//g' | #
                           cut -c 1-6``echo $RANDOM | md5sum           | #
                           sed 's/[^a-f]//g' | cut -c 1-6`               #

  if [ "$OUTPUTFORMAT" == "pdf" ];then

  echo "% ------------------------------------------------ %"     >> $SRCDUMP
  echo "\newcommand${OFFPAGETEXTMACRO}[1]{"                       >> $SRCDUMP
  echo "\begin{minipage}{10\paperwidth} % MAKE IT HUGE"           >> $SRCDUMP
  echo "{\vspace{-4\paperheight} % MOVE IT OUT"                   >> $SRCDUMP
  echo " \tiny #1} % MAKE IT TINY"                                >> $SRCDUMP
  echo "\end{minipage}}"                                          >> $SRCDUMP
  
  echo "% ------------------------------------------------ %"     >> $SRCDUMP
  echo "   \newcommand${SPREADWITHTEXTMACRO}[3]{%"                >> $SRCDUMP
  echo "   \includepdf[pagecommand={\thispagestyle{empty}"        >> $SRCDUMP
  echo "                            ${OFFPAGETEXTMACRO}{#3}},"    >> $SRCDUMP
  echo "               scale=1,pages=#2]{#1}"                     >> $SRCDUMP
  echo "  }"                                                      >> $SRCDUMP
  echo "% ------------------------------------------------ %"     >> $SRCDUMP

 #elif [ "$OUTPUTFORMAT" == "html" ];then
  fi

# --------------------------------------------------------------------------- #

function SPREAD() {

   mkpages $* --keeptmp

   FIRSTPAGEIS="" # RESET
   NUMPAGES=`pdftk $PDFGET dump_data  | # GET INFO ($PDFGET SET BY mkpages)
             grep NumberOfPages       | # GET PAGE NUMBER INFO
             cut -d ":" -f 2          | # CUT FIELD
             sed 's/[^0-9]//g'`         # RM ALL BUT NUMBERS

 # EXTRACT PAGE FLAG VALUES
 # ------------------------------------------------------------------------ #
   PAGES=`echo $* | sed 's/ /\n/g'    | # SPACES TO NEWLINES
          sed "/[^0-9\\-]/d"          | # NO LINES WITH MORE THAN NUMS AND -
          egrep -v "^-|-$"            | # IGNORE ISOLATED - 
          grep -v "^[ ]*$" | tail -n 1` # 
   if   [ `echo $PAGES | wc -c` -le 1 ] # PAGES ARE NOT SET
   then  PAGES="-"
   elif [ `echo $PAGES | grep "^[0-9]" | # PAGES DO ACTUALLY ...
           wc -l` -ge 1 ]                # ... START WITH A NUMBER
   then  P1=`echo $PAGES | cut -d "-" -f 1` # SET P1 TO NUM BEFORE DASH
         P2=`echo $PAGES               | # DISPLAY PAGE FLAG
             sed 's/^[0-9]*-/-/'       | # CONVERT LEADING NUMBERS TO DASH
             grep "-" | cut -d "-" -f 2` # SELECT AND CUT LEADING DASH
   else  PAGES="-" ; PAGECOMMAND=""; fi      # DEFINE FALLBACK

 # CONFORM PAGE VALUES
 # ------------------------------------------------------------------------ #
   if [ "$P1" != "" ] # IF P1 IS SET
   then if [ "$P1" -gt "$NUMPAGES" ];then P1="$NUMPAGES"; fi;fi

   if [ "$P2" != "" ]                 # IF P2 IS SET
    then if [ "$P2" -gt "$NUMPAGES" ] # IF P2 IS GREATER THAN MAX PAGE NUMBER ...
         then P2="$NUMPAGES"          # ... SET TO MAX PAGE NUMBER
         fi;  PAGESEQ=`seq $P1 $P2`   # SET PAGE SEQUENCE
         if [ "$P2" -lt "$P1" ]       # IF P2 IS BIGGER THAN P1
         then PAGESEQ=`seq $P2 $P1  | # START PAGE SEQUENCE FROM LOWER VALUE
                       tac`           # ... AND REVERT
         fi
   else PAGESEQ="$P1"                 # IF P2 IS NOT SET PAGE SEQUENCE = P1
   fi
   if [ "$PAGES" == "-" ];then        # IF PAGE FLAG REQUIRES ALL ...
         P1="1";P2="$NUMPAGES"        # ... SET PAGE SEQUENCE ...
         PAGESEQ=`seq $P2`            # ... TO MAX PAGE NUMBER
   fi

   if [ `python -c "print $P1 / 2.0" | # DIVIDE BY 2
         cut -d "." -f 2` -lt 1 ]      # CUT AND CHECK VALUE AFTER .
   then  FIRSTPAGEIS="even"            # IF = 0 -> PAGE IS EVEN
   else  FIRSTPAGEIS="odd"             # IF > 0 -> PAGE IS ODD
   fi    

   if   [ "$FIRSTPAGEIS" == "odd" ]; then
           PAGECOMMAND="\cleartoleft"
   elif [ "$FIRSTPAGEIS" == "even" ]; then
           PAGECOMMAND="\cleartoright"
   else  # ALL PAGES -> P1 = 1
           PAGECOMMAND="\cleartoleft"
   fi

 # ALLOW IRREGULAR PLACEMENT
 # ----
   if [ `echo $PAGES | grep -v "-" | # RM - AND 0-9 => 2 -gt 0
         wc -l` -gt 0 ]; then  PAGECOMMAND=""; fi

   if [ -f $PDFGET ]; then
        write2src "$PAGECOMMAND"
        for PAGENUM in $PAGESEQ
         do
            PDFTXT=`ls ${PDFGET}* | grep "0\{1,\}${PAGENUM}.txt"`
            write2src "${SPREADWITHTEXTMACRO}{$PDFGET}{$PAGENUM}{%"
            cat "$PDFTXT" 2> /dev/null | sed '/^$/d' >> $SRCDUMP
            write2src "}"
        done
   fi

}

# --------------------------------------------------------------------------- #

